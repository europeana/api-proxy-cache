name: CI

on:
  push:
    branches:
      - 'master'
    tags:
      - 'v[0-9]+.[0-9]+.*'
  pull_request:
    branches:
      - 'master'
    types: [opened, synchronize, reopened, ready_for_review, converted_to_draft]
    paths-ignore:
    - '**.md'

env:
  DOCKER_REPOSITORY: europeana/api-proxy-cache

jobs:
  # Build, and push to Docker Hub, final Docker image
  docker-final-stage:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.pull_request.draft == false
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.DOCKER_REPOSITORY }}
          tags: |
            type=ref,event=pr
            type=ref,event=branch
            type=ref,event=tag
            type=semver,pattern={{version}}
      -
        name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        id: build-push
        uses: docker/build-push-action@v2
        with:
          context: .
          pull: true
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # Deploy to IBM Cloud Kubernetes cluster:
  # * Pull requests are deployed as new resources in dev namespace
  # * Pushes to master update the deployment in the test namespace
  deploy-ibm-cloud:
    runs-on: ubuntu-latest
    needs: [docker-final-stage]
    if: (github.event_name == 'push' && github.event.ref == 'refs/heads/master') || (github.event_name == 'pull_request' && github.event.pull_request.draft == false)
    env:
      IBMCLOUD_API_URL: https://cloud.ibm.com
      IBMCLOUD_API_KEY: ${{ secrets.IBMCLOUD_API_KEY }}
      IBMCLOUD_CLUSTER_NAME: europeana-web
      IBMCLOUD_REGION: eu-de
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.DOCKER_REPOSITORY }}
          tags: |
            type=ref,event=pr
            type=ref,event=branch
      -
        name: Set image tag for deployment
        run: echo "DOCKER_IMAGE_TAG=${{ env.DOCKER_REPOSITORY }}:${{ steps.meta.outputs.version }}" >> $GITHUB_ENV
      -
        name: Prepare env for dev deployments, step 1
        if: github.event_name == 'pull_request'
        run: |
          echo "K8S_NAMESPACE=dev" >> $GITHUB_ENV
          echo "PULL_REQUEST_NUMBER=$(jq .pull_request.number ${GITHUB_EVENT_PATH})" >> $GITHUB_ENV
      -
        name: Prepare env for dev deployments, step 2
        if: github.event_name == 'pull_request'
        run: |
          echo "K8S_RESOURCE_NAME=contentful-proxy-cache-pr-${PULL_REQUEST_NUMBER}" >> $GITHUB_ENV
          echo "K8S_INGRESS_HOST=pr-${PULL_REQUEST_NUMBER}.contentful-proxy-cache.dev.eanadev.org" >> $GITHUB_ENV
      -
        name: Prepare env for test deployment
        if: github.event_name == 'push'
        run: |
          echo "K8S_NAMESPACE=test" >> $GITHUB_ENV
          echo "K8S_RESOURCE_NAME=contentful-proxy-cache" >> $GITHUB_ENV
      -
        name: Create K8s resource manifests for dev deployments
        if: github.event_name == 'pull_request'
        run: |
          envsubst < .github/workflows/ci/k8s/deployment.yml > deployment.yml
          envsubst < .github/workflows/ci/k8s/service.yml > service.yml
          envsubst < .github/workflows/ci/k8s/ingress.yml > ingress.yml
      -
        name: Install ibmcloud CLI
        run: |
          curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
          ibmcloud plugin install container-service
      -
        name: Login to IBM Cloud
        run: |
          ibmcloud login -a ${IBMCLOUD_API_URL} -r ${IBMCLOUD_REGION} --apikey ${IBMCLOUD_API_KEY}
          ibmcloud ks cluster config --cluster ${IBMCLOUD_CLUSTER_NAME}
      -
        name: Detect new deployment
        if: github.event_name == 'pull_request'
        run: |
          set +e
          kubectl --namespace dev get deployment ${K8S_RESOURCE_NAME}
          if [ $? -eq 1 ]; then K8S_NEW_DEPLOYMENT="true"; else K8S_NEW_DEPLOYMENT="false"; fi
          set -e
          echo K8S_NEW_DEPLOYMENT=${K8S_NEW_DEPLOYMENT} >> $GITHUB_ENV
      -
        name: Create new dev resources on IBM Cloud K8s
        if: github.event_name == 'pull_request'
        run: |
          kubectl apply -f deployment.yml
          kubectl apply -f service.yml
          kubectl apply -f ingress.yml
      -
        name: Restart deployment
        run: kubectl rollout restart --namespace ${K8S_NAMESPACE} deployment/${K8S_RESOURCE_NAME}
    outputs:
      k8s-ingress-host: ${{ env.K8S_INGRESS_HOST }}
      k8s-new-deployment: ${{ env.K8S_NEW_DEPLOYMENT }}

  # Publish tagged versions to NPM
  # TODO: only run when version is *released*?
  npm-publish:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith( github.event.ref, 'refs/tags/v' )
    env:
      NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      -
        name: Publish to NPM
        run: npm publish --access public

  # Send a notification to Slack channel with details of new PR deployments
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-ibm-cloud]
    if: github.event_name == 'pull_request' && github.event.pull_request.draft == false && needs.deploy-ibm-cloud.outputs.k8s-new-deployment == 'true'
    env:
      PULL_REQUEST_TITLE: ${{ github.event.pull_request.title }}
      PULL_REQUEST_USER_LOGIN: ${{ github.event.pull_request.user.login }}
      PULL_REQUEST_USER_HTML_URL: ${{ github.event.pull_request.user.html_url }}
      K8S_INGRESS_HOST: ${{ needs.deploy-ibm-cloud.outputs.k8s-ingress-host }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Prepare env for notification to Slack
        run: echo "PULL_REQUEST_NUMBER=$(jq .pull_request.number ${GITHUB_EVENT_PATH})" >> $GITHUB_ENV
      -
        name: Notify Slack
        run: |
          envsubst < .github/workflows/ci/slack/notification.json > ./slack-notification.json
          curl -d "@./slack-notification.json" -X POST ${SLACK_WEBHOOK_URL}
